trigger: none
pr: none

resources:
  repositories:
  - repository: VSFTemplateRepo
    type: github
    endpoint: Orckestra (1)
    name: Orckestra/orc-vsf-template
    # ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    #   ref: 'master'
    # ${{ else }}:
    #   ref: 'develop'

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: npm publish token
  - name: npmTag
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
      value: 'latest'
    ${{ else }}:
      value: 'dev'

steps:
- checkout: self
  fetchDepth: 0
  clean: true
  persistCredentials: true

- task: gitversion/setup@0
  displayName: Install GitVersion
  inputs:
    versionSpec: '5.x'

- task: gitversion/execute@0
  inputs:
    targetPath: '$(Build.SourcesDirectory)/orc-vsf'
    useConfigFile: true
    configFilePath: '$(Build.SourcesDirectory)/orc-vsf/GitVersion.yml'

- task: NodeTool@0
  displayName: 'Use Node 16.x'
  inputs:
    versionSpec: 16.x

- task: Bash@3
  displayName: 'Configure .npmrc and .yarnrc with NPM_TOKEN config'
  
  inputs:
    targetType: 'inline'
    script: |
      echo -e "\r\n//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" >> .npmrc
      echo -e "\r\nregistry \"//registry.npmjs.org/\"" >> .yarnrc
    workingDirectory: '$(Build.SourcesDirectory)/orc-vsf'
  env:
    NPM_TOKEN: $(NpmPublishToken)

- task: Bash@3
  displayName: 'yarn install & build'
  inputs:
    targetType: inline
    script: |
      yarn
    workingDirectory: '$(Build.SourcesDirectory)/orc-vsf'
  env:
    NPM_TOKEN: $(NpmPublishToken)

# - task: Bash@3
#   displayName: 'lerna version'
#   inputs:
#     targetType: 'inline'
#     script: |
#       git config --global user.name "azure devops"
#       node_modules/.bin/lerna version $(GitVersion.SemVer) --yes --force-publish
#     workingDirectory: '$(Build.SourcesDirectory)/orc-vsf'

# - task: Bash@3
#   displayName: 'yarn build & publish api-client'
#   inputs:
#     targetType: inline
#     script: |
#         yarn build:api-client && yarn publish:api-client ${{ variables.npmTag }}
#     workingDirectory: '$(Build.SourcesDirectory)/orc-vsf'
#   env:
#     NPM_TOKEN: $(NpmPublishToken)

# - task: Bash@3
#   displayName: 'yarn build & publish composables'
#   inputs:
#     targetType: inline
#     script: |
#         yarn build:composables && yarn publish:composables ${{ variables.npmTag }}
#     workingDirectory: '$(Build.SourcesDirectory)/orc-vsf'
#   env:
#       NPM_TOKEN: $(NpmPublishToken)

- task: Bash@3
  displayName: 'yarn build theme'
  inputs:
    targetType: inline
    script: |
         yarn build
#        yarn build:theme
         
    workingDirectory: '$(Build.SourcesDirectory)/orc-vsf'
  env:
    NPM_TOKEN: $(NpmPublishToken)

- checkout: VSFTemplateRepo
- task: Bash@3
  displayName: 'build template on develop branch'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    targetType: inline
    script: |
        git fetch origin  
        git checkout -b develop origin/develop
    workingDirectory: '$(Build.SourcesDirectory)/orc-vsf-template'

- task: Bash@3
  displayName: 'update template'
  inputs:
    targetType: inline
    script: |
        node ./scripts/updateTemplate.js
    workingDirectory: '$(Build.SourcesDirectory)/orc-vsf'

- task: Bash@3
  displayName: 'git status'
  inputs:
    targetType: inline
    script: |
        git config --global user.name "azure devops"
        git checkout -b 'release/$(GitVersion.SemVer)'
        git add .
        git status
        git commit -m '$(GitVersion.SemVer)'
    workingDirectory: '$(Build.SourcesDirectory)/orc-vsf-template'